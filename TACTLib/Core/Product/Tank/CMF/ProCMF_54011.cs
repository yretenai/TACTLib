// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="BFF1E18BEEDAB08CB7BC4A5C5248C6E15542FAB7" NAME="TACTLib.ProCMF_54011.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadataAttribute(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_54011 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.DataCount & 511];
            uint increment = kidx % 61;
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += increment;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint) ((digest[7] + header.DataCount) & 511);
            for (int i = 0; i != length; ++i) {
                kidx += (uint) header.EntryCount + digest[header.EntryCount % SHA1_DIGESTSIZE];
                buffer[i] = digest[SignedMod(kidx, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x6E, 0xA2, 0x64, 0x89, 0xD2, 0xCA, 0x24, 0xFE, 0x29, 0xBC, 0xDE, 0xAB, 0x82, 0x77, 0xAE, 0x0B, 
            0x86, 0xA0, 0x18, 0xD0, 0x9D, 0xCF, 0xF5, 0x86, 0x1E, 0x48, 0xDE, 0xC1, 0x5F, 0x59, 0x08, 0xED, 
            0x9F, 0x67, 0xCD, 0xBC, 0x69, 0x40, 0xA9, 0x8F, 0xB2, 0x38, 0xBF, 0x07, 0xE0, 0x0E, 0x23, 0x0C, 
            0xE1, 0xE4, 0x61, 0xAB, 0xD5, 0x6C, 0x9D, 0x52, 0x2D, 0x81, 0xBA, 0xD6, 0x4E, 0x23, 0x8F, 0xE0, 
            0x51, 0x3E, 0x26, 0xF5, 0x34, 0xF3, 0xB9, 0x75, 0xFF, 0x57, 0x96, 0x19, 0x3A, 0x4D, 0x02, 0x16, 
            0x2B, 0x40, 0x87, 0x7F, 0x3E, 0x13, 0xD4, 0xA2, 0x53, 0xC4, 0x8D, 0x49, 0x85, 0xD3, 0x6C, 0x36, 
            0xE0, 0x6B, 0x49, 0x9F, 0x96, 0xC2, 0xC3, 0xDE, 0x25, 0x77, 0x39, 0xD8, 0xE5, 0x94, 0x4E, 0x2D, 
            0x41, 0x7B, 0x44, 0x97, 0x4C, 0xA8, 0x32, 0x49, 0x66, 0x56, 0xBE, 0xA0, 0xD5, 0xA8, 0x6E, 0xB3, 
            0x4B, 0xF1, 0x4F, 0x26, 0x5D, 0x9D, 0xED, 0xE4, 0x31, 0x68, 0xB9, 0x25, 0x3B, 0xDB, 0x14, 0x91, 
            0x80, 0x51, 0x34, 0x34, 0x9A, 0x61, 0xDA, 0xE8, 0x77, 0xCA, 0x4F, 0xA0, 0xD9, 0x6D, 0x0E, 0x47, 
            0xB6, 0xCA, 0xCE, 0xAE, 0x47, 0x69, 0x87, 0xBA, 0xA2, 0x6A, 0xE1, 0xB2, 0x14, 0xC1, 0x7D, 0x61, 
            0xA8, 0x6D, 0x8F, 0xF9, 0x2B, 0x38, 0x04, 0x92, 0x4D, 0x5A, 0x5B, 0xB6, 0x0D, 0x83, 0x96, 0x4D, 
            0x0D, 0x2F, 0x12, 0x2A, 0x1D, 0x7E, 0xA3, 0x3F, 0xE9, 0xA8, 0xF5, 0x18, 0xE1, 0x3F, 0x84, 0x13, 
            0x61, 0xC3, 0xFD, 0x30, 0xE4, 0x36, 0x72, 0x67, 0x50, 0x7F, 0x04, 0xDB, 0xAB, 0x15, 0x0F, 0x73, 
            0x90, 0xBC, 0xF1, 0x0E, 0x19, 0x7B, 0xD9, 0x13, 0x78, 0x7F, 0x3F, 0x73, 0xBF, 0xA4, 0xA0, 0xC8, 
            0x86, 0xE7, 0x3F, 0x83, 0x31, 0xC3, 0x8A, 0x75, 0x71, 0x75, 0xD5, 0xFF, 0x90, 0x37, 0xCF, 0x75, 
            0x92, 0xD8, 0xB8, 0x32, 0x0D, 0xBC, 0x0A, 0xF0, 0x0E, 0x41, 0xDF, 0x46, 0x17, 0xD8, 0x79, 0xCC, 
            0xC3, 0xA0, 0x30, 0x71, 0xE2, 0x4A, 0xC7, 0x78, 0xEF, 0x44, 0x58, 0x0D, 0x52, 0x81, 0xD7, 0xA9, 
            0x7B, 0x38, 0xE3, 0x0A, 0xA1, 0xAF, 0x72, 0x6D, 0x74, 0xFE, 0x13, 0x8C, 0x0C, 0x65, 0x9A, 0x89, 
            0xB9, 0x50, 0x6E, 0x65, 0x28, 0xAD, 0x14, 0x5E, 0x55, 0x13, 0x8E, 0x2F, 0xEB, 0x04, 0xBB, 0x5B, 
            0x2D, 0x18, 0x5B, 0x91, 0x2B, 0xE6, 0x92, 0x70, 0x85, 0x35, 0x92, 0x1C, 0x01, 0xAB, 0xF9, 0x14, 
            0x3B, 0xB8, 0x49, 0x7B, 0x10, 0xCF, 0xAE, 0xCC, 0xFB, 0x30, 0xCF, 0x06, 0xA5, 0xF1, 0xC2, 0x40, 
            0xCA, 0x25, 0xFA, 0xE2, 0xC8, 0x18, 0x9C, 0xED, 0xEE, 0x5A, 0xB4, 0x64, 0x78, 0x34, 0x4C, 0xA4, 
            0x1E, 0xF7, 0x22, 0xEC, 0x08, 0x74, 0x25, 0x4D, 0xAC, 0xD6, 0xF0, 0x82, 0x66, 0xC9, 0xB9, 0x69, 
            0x5B, 0x91, 0x5A, 0x54, 0x6B, 0x79, 0x4D, 0x3E, 0xBD, 0x0B, 0xC8, 0x70, 0x6B, 0x08, 0xA7, 0x07, 
            0x09, 0xCB, 0xE1, 0xB9, 0x0C, 0x74, 0x16, 0x85, 0xA3, 0xB4, 0xD6, 0x3B, 0x22, 0x8B, 0xD8, 0x88, 
            0x27, 0xE8, 0x7A, 0xF2, 0xB7, 0x18, 0x48, 0xD5, 0x39, 0x75, 0x59, 0x5A, 0x47, 0x57, 0xA0, 0xDA, 
            0xB9, 0x23, 0xBD, 0xC4, 0x91, 0xA9, 0xA8, 0xBA, 0x20, 0x09, 0x89, 0x51, 0xDB, 0x42, 0x04, 0xF6, 
            0xCC, 0xD4, 0xD4, 0x8A, 0xAA, 0x6B, 0x17, 0x78, 0xFC, 0x85, 0x5B, 0xED, 0x97, 0x85, 0xDC, 0x92, 
            0xE0, 0xCF, 0x4E, 0x36, 0x45, 0x0B, 0x96, 0x11, 0x12, 0x08, 0x98, 0x60, 0x96, 0xA9, 0x11, 0xFC, 
            0xAA, 0x7A, 0x18, 0xF1, 0x26, 0x65, 0x9E, 0xBC, 0x91, 0x7B, 0x0C, 0xB7, 0xB0, 0x70, 0x63, 0xBD, 
            0x17, 0x60, 0xC2, 0x66, 0x56, 0x37, 0xC0, 0xE6, 0x99, 0x5F, 0xBF, 0x6A, 0x77, 0x7A, 0x39, 0x9F
        };
    }
}
