// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="3B3C08937E64E008C3171ADA0D7B909FD6FD3239" NAME="TACTLib.ProCMF_35328.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_35328 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.DataCount & 511];
            const uint increment = 3;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Constrain(header.BuildVersion * length);
            uint increment = kidx % 61;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= digest[(kidx - i) % SHA1_DIGESTSIZE];
            }

            return buffer;
        }
        
        private static readonly byte[] Keytable = {
            0xAB, 0xD1, 0x7A, 0xF5, 0xD8, 0x95, 0x03, 0x95, 0x07, 0xBF, 0xD0, 0x51, 0xA3, 0x8D, 0x54, 0xD2, 
            0xB7, 0xB9, 0xB3, 0xC7, 0xF3, 0x95, 0x77, 0xB5, 0x86, 0xAB, 0xE0, 0x83, 0xF9, 0x69, 0xD5, 0x05,
            0xEF, 0xB6, 0x39, 0xED, 0x3A, 0xEB, 0x35, 0x99, 0x28, 0x59, 0xFE, 0xA9, 0xB4, 0xC2, 0x3A, 0x32, 
            0x35, 0xB4, 0xC3, 0xC2, 0xAE, 0x19, 0xFC, 0xB7, 0xDE, 0x94, 0x41, 0xEC, 0xD8, 0xDC, 0x21, 0xC8, 
            0x5F, 0x13, 0x26, 0xDE, 0x5D, 0xCF, 0x10, 0xF6, 0x69, 0x0C, 0x6B, 0xD6, 0x7A, 0xB9, 0x38, 0x0C, 
            0x33, 0x03, 0x6A, 0x29, 0xFC, 0xCB, 0x44, 0xBE, 0x23, 0xD6, 0xBB, 0xB7, 0x54, 0x70, 0x3D, 0xE5, 
            0x9F, 0xF2, 0xC7, 0xC3, 0x21, 0x8B, 0x68, 0x21, 0x9B, 0x0F, 0xC2, 0x80, 0xDD, 0x19, 0x5B, 0xEB, 
            0x2A, 0x55, 0x75, 0x81, 0x0D, 0xA0, 0x28, 0xBB, 0x52, 0x0B, 0xA7, 0x34, 0x84, 0x46, 0x99, 0xEB, 
            0x7A, 0xA1, 0xD1, 0xBD, 0x27, 0xC3, 0x20, 0xC6, 0x5D, 0x8C, 0xA3, 0xD4, 0x87, 0x9F, 0x90, 0x61, 
            0xDC, 0x9D, 0x2D, 0x3E, 0xF3, 0x37, 0xB0, 0xA9, 0x13, 0x97, 0xDD, 0xF6, 0x79, 0x27, 0xFA, 0xC7, 
            0xF3, 0x6F, 0xC5, 0xF0, 0xFA, 0x52, 0xF1, 0x82, 0xE0, 0xEF, 0x99, 0x84, 0x18, 0xBB, 0xAD, 0x26, 
            0x9F, 0xA4, 0xE4, 0xA8, 0xE0, 0x73, 0xA0, 0x13, 0x3B, 0x14, 0xA5, 0xBA, 0x64, 0xC3, 0xC5, 0x68, 
            0xF5, 0xBF, 0x4F, 0x94, 0xA0, 0xAC, 0xC8, 0x29, 0xB8, 0xC3, 0x42, 0x18, 0x09, 0xCF, 0x48, 0x57, 
            0x69, 0xED, 0x78, 0x84, 0xB9, 0x4A, 0x5B, 0x1F, 0xE8, 0x08, 0x55, 0x55, 0x95, 0x40, 0xBC, 0x71, 
            0x4F, 0x22, 0x90, 0xD4, 0x19, 0x61, 0x1F, 0x67, 0x36, 0x7F, 0xBD, 0xF1, 0x76, 0x75, 0xE1, 0x99, 
            0xB0, 0x9F, 0x54, 0x71, 0x65, 0x8E, 0xCB, 0x61, 0xC0, 0xF7, 0xE3, 0xA9, 0xAB, 0xE8, 0xD2, 0x3E, 
            0x48, 0xD4, 0x2D, 0xF8, 0x56, 0x32, 0xCF, 0xFC, 0x77, 0x77, 0x20, 0x3E, 0x92, 0x78, 0xF0, 0x4F, 
            0xB7, 0x90, 0x74, 0xF0, 0x41, 0xF9, 0x38, 0x26, 0xD3, 0x37, 0xD6, 0x10, 0x75, 0x1A, 0x75, 0x12, 
            0xD9, 0x39, 0x64, 0x1C, 0x37, 0x6D, 0x4B, 0x1C, 0xA8, 0xFF, 0x29, 0x5C, 0x9F, 0x6E, 0x68, 0x26, 
            0xCA, 0x3E, 0x06, 0xA6, 0xCB, 0xE6, 0x27, 0x13, 0xD2, 0x12, 0xB2, 0xFF, 0xF7, 0x4A, 0x4A, 0x19, 
            0x68, 0x02, 0x85, 0xBE, 0xE2, 0x10, 0xFA, 0x97, 0xFE, 0x1B, 0x4A, 0x1F, 0xA8, 0xDD, 0x7F, 0x69,
            0x22, 0x53, 0xC0, 0x3B, 0xFA, 0x80, 0x77, 0xC2, 0x10, 0x49, 0x59, 0x08, 0x62, 0x3B, 0x62, 0x5F, 
            0xE5, 0x4F, 0xEF, 0xDC, 0xC3, 0x56, 0x4A, 0xCB, 0x62, 0x9C, 0x27, 0x91, 0xEA, 0xD9, 0x47, 0x83, 
            0x55, 0xBD, 0x80, 0x2A, 0x67, 0x0A, 0x4F, 0x13, 0x1F, 0xE5, 0x6A, 0x06, 0x70, 0x60, 0x3C, 0xC2, 
            0x4A, 0x03, 0x2A, 0x3B, 0xC2, 0x80, 0xCB, 0xC9, 0x2E, 0x9F, 0x7F, 0x87, 0x1B, 0xD1, 0x8B, 0xA7, 
            0xEE, 0xD8, 0x6A, 0x61, 0x85, 0x81, 0x75, 0x40, 0x02, 0x89, 0x23, 0xD6, 0xBC, 0xC3, 0xB3, 0x38, 
            0x61, 0x9A, 0x50, 0x41, 0xF4, 0xD5, 0xB0, 0x84, 0xD4, 0xCF, 0x13, 0x87, 0xF7, 0x8F, 0x1C, 0x1F,
            0xAB, 0xA1, 0xCC, 0x17, 0x83, 0x30, 0x8A, 0x6E, 0xDE, 0x86, 0x5F, 0xC4, 0xCC, 0x55, 0x85, 0xF6, 
            0x8A, 0x60, 0xA3, 0x4B, 0xF9, 0xC1, 0xA6, 0x8E, 0x31, 0x75, 0xC2, 0xAD, 0xCF, 0x52, 0xCE, 0x29, 
            0x1D, 0xBE, 0x07, 0x50, 0xD1, 0x20, 0xA5, 0xB2, 0x4E, 0x79, 0x1C, 0xBC, 0xEA, 0xB4, 0x01, 0xBB, 
            0x3F, 0x55, 0x75, 0x47, 0xAA, 0xE7, 0x73, 0xF7, 0x78, 0x3B, 0xC1, 0x63, 0x3D, 0xD5, 0x09, 0xB4, 
            0x6A, 0x45, 0x01, 0xD7, 0x5C, 0xDA, 0x8E, 0x93, 0xF8, 0x45, 0xDC, 0x5B, 0x91, 0xDF, 0x8B, 0x41
        };
    }
}
