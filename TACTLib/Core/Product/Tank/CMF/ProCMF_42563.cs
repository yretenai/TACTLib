// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="D58C9B22C1F01514F5E35D33B5E5C6E208151376" NAME="TACTLib.ProCMF_42563.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_42563 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) (header.BuildVersion * length);
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx = header.BuildVersion - kidx;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.BuildVersion & 511];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += header.BuildVersion * (uint)header.DataCount % 7;
                buffer[i] ^= digest[SignedMod(kidx - 73, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x03, 0x0D, 0x01, 0x2C, 0x59, 0xE2, 0x0A, 0x82, 0x2F, 0x16, 0xC3, 0x00, 0x69, 0xE8, 0xDC, 0x06,
            0x26, 0x6D, 0x7D, 0x4E, 0xC0, 0x8E, 0x27, 0x17, 0xDB, 0x7E, 0xCA, 0x13, 0x35, 0xDE, 0x5F, 0x15,
            0x14, 0x0C, 0xC5, 0x6A, 0xA7, 0xA2, 0x3C, 0xE3, 0xD5, 0x0F, 0x7D, 0xC8, 0x15, 0xA0, 0xC0, 0x1F,
            0x24, 0xB7, 0xFB, 0x54, 0x57, 0x95, 0x78, 0x98, 0x22, 0x8A, 0x91, 0xE5, 0x6E, 0xA7, 0xFD, 0xF3,
            0x73, 0x2E, 0x56, 0xB2, 0xFF, 0x9B, 0xCA, 0x62, 0x9C, 0x91, 0x9F, 0xDF, 0xEE, 0x3E, 0xF2, 0x08,
            0x8A, 0x4E, 0x33, 0x39, 0x5B, 0x37, 0xC4, 0x9E, 0x0F, 0xAA, 0x6E, 0x8D, 0x69, 0xDC, 0x94, 0x0E,
            0x9F, 0x41, 0xC6, 0x57, 0xA0, 0xE6, 0x4F, 0x52, 0x33, 0xBD, 0x15, 0xDE, 0xB7, 0x20, 0x30, 0x01,
            0x06, 0x32, 0x7C, 0x07, 0xCB, 0xB8, 0x1E, 0xD6, 0xCC, 0x15, 0x6E, 0x2A, 0x41, 0xE0, 0xC3, 0xFA,
            0xF4, 0xBF, 0xAB, 0x13, 0x0B, 0x88, 0x9D, 0xA1, 0x02, 0xFC, 0x3F, 0xCD, 0x8F, 0x4F, 0x6E, 0x94,
            0x69, 0xA9, 0xB6, 0x5A, 0x87, 0xC7, 0xA7, 0x4C, 0xE3, 0x16, 0x69, 0x55, 0x29, 0x9B, 0xF1, 0x0E,
            0x1C, 0x2E, 0xF8, 0x4C, 0xEB, 0xF9, 0x22, 0x33, 0x34, 0xE6, 0x3F, 0x93, 0x8D, 0xE4, 0xAA, 0x31,
            0x14, 0xC8, 0xD0, 0x5F, 0x87, 0xDC, 0xF0, 0xDA, 0x4D, 0xA7, 0x79, 0x93, 0x6D, 0x83, 0x11, 0x37,
            0x6D, 0xD8, 0x09, 0xE4, 0x1B, 0x60, 0xF0, 0x19, 0xA8, 0xB6, 0x10, 0xA9, 0xF9, 0xB6, 0x10, 0xD1,
            0x97, 0x97, 0xC6, 0x0D, 0x4D, 0x7B, 0x06, 0xEF, 0x0B, 0xB0, 0x31, 0x6B, 0xF5, 0x16, 0x98, 0x17,
            0xC0, 0x47, 0x01, 0x7A, 0xE0, 0xF9, 0x9F, 0xBA, 0x96, 0xB0, 0x6F, 0xC2, 0xD5, 0x67, 0x82, 0xDC,
            0xEC, 0xBF, 0xF8, 0x61, 0x81, 0x55, 0x6E, 0x58, 0xE1, 0x35, 0x33, 0xBC, 0xB6, 0xBB, 0xD6, 0xBD,
            0x73, 0xB7, 0xEF, 0x5D, 0xBC, 0xFE, 0x08, 0xF5, 0xDF, 0xA6, 0x92, 0xC5, 0xC4, 0x35, 0x81, 0xAA,
            0x78, 0xDF, 0xE3, 0x06, 0x46, 0xF2, 0x84, 0x5E, 0xA6, 0x7A, 0xD7, 0x4E, 0x1A, 0x36, 0x6F, 0x8A,
            0xC3, 0xD2, 0x77, 0xD2, 0xA9, 0xE1, 0x87, 0xFE, 0xE5, 0x94, 0x34, 0xDA, 0x68, 0xCB, 0x1C, 0xA6,
            0x55, 0xA5, 0x37, 0xFA, 0x58, 0xB8, 0xEB, 0x34, 0x6F, 0xB9, 0xC9, 0xA5, 0x28, 0x7C, 0x32, 0x80,
            0x55, 0x61, 0x83, 0xC9, 0x8F, 0xFB, 0xC7, 0xCC, 0x91, 0x2E, 0xA2, 0xD3, 0x39, 0xB5, 0xE0, 0xD4,
            0x30, 0xCF, 0x0E, 0xBE, 0x01, 0x77, 0x95, 0xEC, 0x9A, 0xF5, 0xB7, 0x0F, 0xEE, 0x89, 0x0E, 0xDB,
            0xC7, 0x1B, 0x36, 0x71, 0x00, 0x81, 0x22, 0x4C, 0x7E, 0x59, 0x13, 0x43, 0xDA, 0x75, 0xDC, 0x85,
            0x72, 0x85, 0x6A, 0x16, 0x60, 0xD4, 0x44, 0xC0, 0x6E, 0x34, 0x1C, 0xCC, 0xB1, 0x7A, 0x53, 0xCA,
            0x2C, 0x79, 0x43, 0x57, 0xFC, 0x7C, 0xAB, 0x39, 0x79, 0xD3, 0x15, 0x2A, 0x3D, 0x0B, 0x9A, 0x84,
            0xF1, 0xD8, 0x9E, 0xE0, 0x06, 0x2E, 0xCC, 0xE9, 0xBF, 0x6B, 0xD7, 0x5E, 0x57, 0x18, 0x22, 0x36,
            0xE7, 0x1C, 0x1B, 0xF0, 0xB4, 0x8D, 0xDE, 0x4F, 0xBC, 0x6D, 0xC6, 0xB5, 0xD6, 0x1B, 0x65, 0x96,
            0x94, 0xB7, 0x01, 0xE8, 0x40, 0x24, 0xFD, 0x4E, 0x9F, 0xE7, 0x7F, 0x39, 0x19, 0x59, 0xB9, 0x04,
            0xCA, 0xC1, 0xE8, 0x3E, 0x8A, 0x9C, 0x18, 0x01, 0x07, 0x60, 0xC2, 0xC1, 0x15, 0xA9, 0x45, 0xE1,
            0x23, 0xBE, 0x43, 0xF0, 0x75, 0xC5, 0x43, 0x79, 0x32, 0x9A, 0xAA, 0x26, 0xF8, 0xEE, 0x05, 0xDB,
            0x19, 0x78, 0xB3, 0x01, 0xE6, 0x35, 0xB2, 0xE1, 0xD8, 0xF9, 0x7E, 0xCC, 0x29, 0x30, 0xDC, 0x46,
            0xC4, 0xBE, 0x11, 0xCF, 0xC1, 0xD7, 0x40, 0x0C, 0x96, 0xB5, 0x56, 0xD3, 0x01, 0xBB, 0x48, 0xDC
        };
    }
}
