// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="DC1E1F87E10FD914E024ACF6BEBE6EDCD8698653" NAME="TACTLib.ProCMF_54255.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadataAttribute(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_54255 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.BuildVersion & 511];
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                switch (SignedMod(kidx, 3))
                {
                    case 0:
                        kidx += 103;
                        break;
                    case 1:
                        kidx = (uint)SignedMod(4 * kidx, header.BuildVersion);
                        break;
                    case 2:
                        --kidx;
                        break;
                }
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint) (2 * digest[5]);
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx = header.BuildVersion - kidx;
                buffer[i] ^= digest[SignedMod(i + kidx, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x1D, 0x02, 0xFF, 0xF4, 0x74, 0x36, 0xA3, 0xCB, 0x39, 0x11, 0x04, 0xDD, 0xA1, 0xFD, 0xA6, 0xD6, 
            0x5B, 0xBB, 0x45, 0x69, 0x5F, 0x3E, 0xBA, 0x2A, 0xC9, 0xAF, 0xF6, 0x34, 0x1A, 0x78, 0xA1, 0x36, 
            0x8D, 0xBE, 0xEE, 0x94, 0xE0, 0x49, 0xCC, 0x3C, 0xD3, 0xAD, 0x0F, 0x1F, 0x9D, 0x41, 0x28, 0xD5, 
            0xD4, 0xB6, 0x09, 0x53, 0xDD, 0xC5, 0xE1, 0x04, 0x53, 0x8D, 0x13, 0xBD, 0xBB, 0x2E, 0x56, 0xE0, 
            0x67, 0xE1, 0x26, 0x1C, 0xEC, 0x90, 0x12, 0x40, 0x2E, 0xAD, 0x45, 0x52, 0x98, 0xC4, 0x91, 0x9B, 
            0xF7, 0xA1, 0x9E, 0x8A, 0x8F, 0x7D, 0x83, 0x78, 0xED, 0x45, 0x02, 0xCF, 0x94, 0xF9, 0x7F, 0xC1, 
            0xC2, 0x41, 0x14, 0x52, 0x10, 0xB0, 0x0F, 0xA9, 0x49, 0xE1, 0xE3, 0xFD, 0xE3, 0xFC, 0xE4, 0x49, 
            0x55, 0x64, 0xD8, 0x83, 0xEE, 0xD1, 0x03, 0x7B, 0x8C, 0x32, 0xFE, 0x21, 0xB9, 0xCE, 0xF7, 0xEC, 
            0x72, 0x67, 0x25, 0xD5, 0x51, 0x70, 0x26, 0xBA, 0x9D, 0x85, 0x30, 0x14, 0xE6, 0xC7, 0x57, 0x15, 
            0xDA, 0x2A, 0xEA, 0xD7, 0x55, 0xDC, 0xAB, 0xB7, 0x50, 0xAD, 0xD9, 0x2B, 0xFD, 0x3E, 0xF3, 0xAC, 
            0xB8, 0xBD, 0x2F, 0xB4, 0xA6, 0xC9, 0x4A, 0x7D, 0x63, 0x4F, 0x70, 0xA0, 0xC1, 0x64, 0x85, 0x18, 
            0x71, 0x99, 0x89, 0xDE, 0x97, 0x87, 0xA3, 0x09, 0x66, 0xA2, 0xF1, 0x76, 0x22, 0x95, 0x03, 0xBC, 
            0x09, 0xBB, 0xFE, 0x72, 0x61, 0x85, 0x0C, 0x97, 0x55, 0xD3, 0x07, 0x3A, 0x5C, 0x57, 0xB6, 0xD1, 
            0xE0, 0xEF, 0x76, 0x3D, 0x74, 0x18, 0xBA, 0x37, 0x94, 0x03, 0xCE, 0x97, 0xDE, 0xEB, 0xB9, 0x34, 
            0x90, 0x2A, 0x13, 0x11, 0xE0, 0xC8, 0x7C, 0x5D, 0xF7, 0xBE, 0xB2, 0x22, 0x7E, 0xBA, 0x08, 0xB2, 
            0xF7, 0xEC, 0x9B, 0x2E, 0x01, 0xBC, 0x56, 0xA7, 0x84, 0x52, 0x34, 0x06, 0xC6, 0x73, 0x2B, 0xF0, 
            0x5B, 0xB5, 0xEB, 0xC1, 0x43, 0x5E, 0x8F, 0xB4, 0x0E, 0x06, 0x4D, 0x9C, 0x42, 0xE4, 0x87, 0x0F, 
            0x8B, 0x7C, 0x8E, 0x8F, 0xCD, 0xA6, 0x98, 0xBD, 0x85, 0xD8, 0x92, 0xB4, 0x90, 0x1C, 0x95, 0xE0, 
            0x4B, 0x87, 0xC6, 0xE6, 0x8C, 0xD1, 0x0B, 0xB7, 0x86, 0x33, 0x31, 0xD4, 0x30, 0x91, 0x06, 0xC6, 
            0xA2, 0x9E, 0x06, 0xD3, 0xE5, 0x4D, 0x66, 0x51, 0x71, 0xDF, 0x21, 0x20, 0x90, 0x2C, 0x76, 0xDA, 
            0x71, 0x50, 0xFD, 0x71, 0xA0, 0x44, 0x4E, 0xAB, 0x3B, 0x93, 0x72, 0xA1, 0x4F, 0xF5, 0xB1, 0xEF, 
            0x78, 0x63, 0x1D, 0x13, 0xBA, 0x76, 0x03, 0x42, 0x67, 0x2C, 0x32, 0xB9, 0xFB, 0x06, 0x9B, 0x50, 
            0x26, 0x21, 0xF6, 0x9A, 0xC9, 0x0A, 0x9A, 0x30, 0xCA, 0x0A, 0x5D, 0x1E, 0x8F, 0x58, 0x29, 0x81, 
            0x2E, 0x60, 0xD0, 0xF5, 0x65, 0x55, 0xE6, 0xDC, 0x74, 0x56, 0x8B, 0x81, 0x45, 0x37, 0x0F, 0x0D, 
            0x6B, 0xDF, 0x15, 0xDF, 0xD7, 0x38, 0x71, 0xD2, 0x16, 0xC1, 0x40, 0x2D, 0xCD, 0xB7, 0x1B, 0x7C, 
            0xBB, 0x5B, 0x50, 0x1B, 0xE9, 0xE0, 0xE3, 0xF2, 0xED, 0x25, 0xB4, 0x18, 0x03, 0xF3, 0x93, 0x70, 
            0x8F, 0x06, 0x72, 0x82, 0xA5, 0xE8, 0x63, 0x9C, 0x6E, 0x1D, 0x87, 0x3D, 0x1F, 0x05, 0xBD, 0x72, 
            0x98, 0x47, 0xD3, 0x55, 0xB2, 0xDC, 0xFC, 0xF7, 0x20, 0x65, 0x66, 0xC3, 0xD2, 0x11, 0x8C, 0xD8, 
            0x51, 0xDC, 0x35, 0xA9, 0xFA, 0x6D, 0x42, 0xF1, 0xCB, 0xE6, 0x90, 0x68, 0x4B, 0xA0, 0xCB, 0xA8, 
            0x2B, 0x18, 0x09, 0x4F, 0xF4, 0x2E, 0x3A, 0xB3, 0x60, 0xCF, 0xB7, 0xF1, 0x0F, 0x99, 0xE5, 0x08, 
            0x65, 0x69, 0x5D, 0x81, 0xD1, 0x49, 0x87, 0x52, 0xFD, 0x7E, 0x98, 0xC7, 0x54, 0x33, 0x52, 0xA4, 
            0xF7, 0x8D, 0xDF, 0x0A, 0x29, 0xFC, 0x90, 0xC4, 0x82, 0x73, 0xB4, 0xCA, 0xD4, 0x05, 0xC3, 0x78
        };
    }
}
