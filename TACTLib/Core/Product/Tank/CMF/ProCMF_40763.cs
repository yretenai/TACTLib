// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="A18525E043717A7EF19D4A0C1F85A966C53BFC6A" NAME="TACTLib.ProCMF_40763.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_40763 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) length * header.BuildVersion;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx -= header.BuildVersion & 511;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.DataCount & 511];
            uint increment = kidx % 29;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= (byte) (digest[(kidx + header.EntryCount) % SHA1_DIGESTSIZE] + 1);
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x50, 0x00, 0xE5, 0xCD, 0xEF, 0xD0, 0xA2, 0xBE, 0xD5, 0x1A, 0x19, 0x71, 0x4B, 0x43, 0x39, 0x63,
            0x87, 0xCB, 0x80, 0xF3, 0x86, 0x4B, 0xBE, 0xB8, 0xF4, 0x39, 0x55, 0x9E, 0xAB, 0x55, 0x8C, 0x77,
            0x36, 0x8C, 0x3E, 0x23, 0x09, 0x29, 0x2A, 0x67, 0x86, 0xDF, 0x07, 0x2C, 0xBC, 0x70, 0xF8, 0x17,
            0xFB, 0x7A, 0xDD, 0xFA, 0x80, 0xA8, 0xD7, 0xAF, 0xA5, 0xEF, 0x36, 0x45, 0xF8, 0xA0, 0x46, 0x94,
            0x12, 0x12, 0xD6, 0x76, 0xD2, 0x65, 0x9A, 0x7A, 0x42, 0x0A, 0x3F, 0x00, 0x57, 0xF0, 0x12, 0x2C,
            0x71, 0xE4, 0x20, 0xD1, 0x30, 0x41, 0x12, 0x2A, 0x49, 0xE1, 0xF0, 0xFE, 0x01, 0x2E, 0x3D, 0xA4,
            0x53, 0x82, 0x94, 0x9C, 0x43, 0x05, 0xE8, 0xA6, 0xCC, 0x93, 0x4B, 0x96, 0x6D, 0xD9, 0x9F, 0xCD,
            0xE1, 0x1B, 0x13, 0x54, 0xAA, 0x02, 0x05, 0x8A, 0x08, 0x78, 0x82, 0xFC, 0x00, 0x52, 0x03, 0x43,
            0xB8, 0xA8, 0x25, 0x4C, 0xA8, 0x35, 0x50, 0x42, 0x99, 0x53, 0x0B, 0x41, 0x1B, 0xE6, 0xB1, 0xE1,
            0x2C, 0x70, 0xED, 0x8A, 0xDF, 0x30, 0x26, 0x88, 0x94, 0x36, 0x6C, 0x92, 0x00, 0xD7, 0x32, 0xBF,
            0x35, 0x19, 0x76, 0xF0, 0x14, 0xEA, 0x4E, 0x40, 0x2F, 0xD7, 0xAC, 0x28, 0x26, 0xC9, 0xE5, 0x0C,
            0x8F, 0xF5, 0xF0, 0x51, 0x62, 0x70, 0x83, 0x7D, 0x78, 0x8F, 0xA9, 0x37, 0xA6, 0xB3, 0x07, 0x17,
            0xDC, 0x88, 0x22, 0xEE, 0x31, 0x2B, 0x50, 0xCD, 0x59, 0xBA, 0x74, 0x20, 0xF9, 0x40, 0xD8, 0x59,
            0x5A, 0x8E, 0xBA, 0xA0, 0x3A, 0x0D, 0xBB, 0xEE, 0x5A, 0x2C, 0x1E, 0x7D, 0x2B, 0x53, 0x86, 0x20,
            0x7A, 0x9C, 0x64, 0xBA, 0xE2, 0x77, 0xEE, 0xFA, 0x41, 0xAB, 0x54, 0x34, 0x66, 0x35, 0x8B, 0xFC,
            0xE5, 0x1E, 0x7D, 0x41, 0x7A, 0x39, 0x4F, 0xE4, 0x2A, 0x78, 0xDE, 0xDB, 0xA1, 0x3B, 0x01, 0x62,
            0x2C, 0x79, 0x84, 0xF9, 0xC7, 0xE1, 0xA9, 0x54, 0xD7, 0xBB, 0x76, 0x82, 0x35, 0x62, 0x99, 0x21,
            0x21, 0xD3, 0x78, 0xFB, 0xD5, 0xA1, 0x2C, 0x4E, 0xB3, 0xF9, 0xEA, 0x54, 0x44, 0xE2, 0x1D, 0xE4,
            0x64, 0x92, 0xC4, 0xE9, 0x1E, 0x1B, 0x83, 0x1E, 0x05, 0xAC, 0x3F, 0x52, 0x90, 0xE8, 0x79, 0xEF,
            0xED, 0x85, 0xFB, 0x17, 0xF6, 0x98, 0x3A, 0x27, 0xA9, 0x4F, 0x3C, 0x2E, 0x64, 0xD1, 0x9D, 0x8B,
            0xEF, 0x36, 0x6B, 0x21, 0x85, 0x79, 0x50, 0x7B, 0x1A, 0x83, 0xB5, 0x63, 0xEA, 0x56, 0x41, 0x15,
            0x2C, 0xC0, 0xB8, 0xE7, 0x58, 0xE2, 0x92, 0x49, 0xA3, 0x3C, 0xB5, 0xF1, 0xDB, 0x0A, 0xCF, 0xAF,
            0x0E, 0xE7, 0x1A, 0xE0, 0x54, 0x80, 0x43, 0x3B, 0xB0, 0xC3, 0x92, 0x13, 0xC4, 0x53, 0x15, 0x3C,
            0x44, 0x3B, 0x85, 0xEC, 0x67, 0x50, 0x36, 0x1B, 0x86, 0x25, 0xC6, 0x12, 0x35, 0xD8, 0x8B, 0x55,
            0xC6, 0x9D, 0x70, 0xF9, 0x56, 0x2A, 0xE1, 0x94, 0xDB, 0xF0, 0x86, 0x89, 0x60, 0x29, 0x1B, 0x27,
            0xE9, 0x7C, 0xD0, 0x1E, 0xDC, 0x3C, 0xE2, 0x89, 0xAE, 0x59, 0x60, 0x80, 0xB4, 0x2C, 0xC6, 0x49,
            0x52, 0x69, 0xF2, 0xC8, 0x34, 0xA3, 0xC7, 0x7F, 0x37, 0xB5, 0x72, 0xDE, 0x0D, 0x19, 0x28, 0xCF,
            0xE8, 0x23, 0x86, 0xE5, 0x95, 0x37, 0xEC, 0x73, 0x56, 0x8C, 0xDC, 0xDB, 0xE1, 0xF8, 0x85, 0xA9,
            0x4A, 0xFB, 0xBB, 0xD1, 0xA9, 0xB0, 0xEE, 0x32, 0xF0, 0x85, 0x4F, 0xE1, 0x12, 0xA3, 0xCC, 0x9B,
            0xCC, 0xCA, 0x9E, 0x94, 0xA3, 0x25, 0xDC, 0x02, 0x35, 0x8C, 0xA1, 0xC4, 0x49, 0xEF, 0xAC, 0x09,
            0x06, 0x68, 0x18, 0x29, 0x12, 0xC1, 0x20, 0x13, 0x65, 0x22, 0x2A, 0x05, 0x34, 0x1F, 0xBD, 0x39,
            0x3A, 0xB4, 0x10, 0x7E, 0x4A, 0x79, 0xCF, 0x68, 0xEF, 0xF0, 0x9B, 0x75, 0xF6, 0x76, 0x46, 0xA3
        };
    }
}
