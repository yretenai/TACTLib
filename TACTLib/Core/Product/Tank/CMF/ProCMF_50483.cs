// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="4047118105499ECC3AA63B57993BFAFA00F2D6AC" NAME="TACTLib.ProCMF_50483.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF
{
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_50483 : ICMFEncryptionProc
    {
        public byte[] Key(CMFHeader header, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint)(header.BuildVersion * length);
            uint increment = kidx % 61;
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += increment;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length)
        {
            byte[] buffer = new byte[length];

            uint kidx = (uint)((header.DataCount + digest[7]) & 511);
            uint increment = (uint)(header.BuildVersion * header.DataCount % 7);
            for (int i = 0; i != length; ++i)
            {
                buffer[i] = Keytable[SignedMod(kidx, 512)];
                kidx += increment;
                buffer[i] ^= digest[SignedMod(kidx - 0x49, SHA1_DIGESTSIZE)];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x09, 0x8E, 0x91, 0x47, 0x54, 0x16, 0x8E, 0x96, 0xFE, 0x99, 0xEF, 0xE5, 0x57, 0xB3, 0x4D, 0xE3,
            0x7A, 0xE7, 0x3E, 0xDE, 0x2C, 0x12, 0x98, 0x96, 0x2F, 0x00, 0x52, 0x84, 0x60, 0xA2, 0xFA, 0xC6,
            0x3C, 0xAC, 0xBA, 0x97, 0x5F, 0xA1, 0x5A, 0x3E, 0x2A, 0xA5, 0x54, 0xE5, 0x0A, 0x48, 0xA9, 0x22,
            0x64, 0xCB, 0x9B, 0xC2, 0x07, 0x98, 0x21, 0x51, 0x60, 0x70, 0xB2, 0x71, 0x18, 0x75, 0x6C, 0x11,
            0x08, 0xCE, 0x32, 0xC0, 0x0B, 0x2B, 0x34, 0xD2, 0x87, 0x33, 0xF8, 0xD8, 0x43, 0x25, 0x4F, 0x90,
            0x0D, 0x11, 0xEA, 0x34, 0xAD, 0x87, 0x86, 0x1E, 0xAE, 0x3D, 0x6C, 0x74, 0xCC, 0x0E, 0xD6, 0x0B,
            0x0E, 0xDA, 0x87, 0xDC, 0xA0, 0xBE, 0xC2, 0x17, 0x7D, 0x01, 0x04, 0x3E, 0xB6, 0x49, 0xD4, 0x51,
            0xCC, 0xFE, 0xB3, 0x01, 0xA2, 0x2B, 0x0A, 0x1B, 0xCC, 0x21, 0xE1, 0xC7, 0x5B, 0x94, 0x65, 0x8B,
            0xCE, 0x41, 0x9E, 0xB2, 0xFA, 0xA4, 0x51, 0xF0, 0x86, 0x02, 0x1A, 0xB8, 0x26, 0xB0, 0x80, 0x8A,
            0x04, 0xF6, 0x6B, 0xEA, 0xD9, 0x57, 0x03, 0xE5, 0xD6, 0x60, 0x9A, 0xEC, 0x0E, 0x4E, 0x1E, 0xF3,
            0x83, 0x7A, 0xAF, 0x79, 0x91, 0x96, 0xD7, 0xCF, 0x2A, 0x99, 0xB0, 0x66, 0x10, 0x74, 0x1A, 0xA3,
            0x72, 0xDF, 0x7B, 0x3D, 0xDC, 0xD1, 0xE8, 0x7A, 0x58, 0x81, 0x8E, 0xDA, 0x20, 0x20, 0x2C, 0x0D,
            0x83, 0x40, 0xD2, 0xCF, 0x1C, 0x76, 0xB2, 0x08, 0x6A, 0x5A, 0x3B, 0x0F, 0x97, 0x75, 0xF2, 0x27,
            0x52, 0x2C, 0x36, 0xD1, 0x07, 0xCE, 0x4C, 0x88, 0x12, 0xF8, 0x43, 0x02, 0x90, 0x1B, 0x29, 0xBF,
            0x8D, 0x5D, 0x3E, 0xA3, 0xD1, 0xC9, 0x25, 0x57, 0x25, 0xB5, 0x26, 0x0B, 0xE4, 0x50, 0x3C, 0x02,
            0x9D, 0xA2, 0xC5, 0xEA, 0x82, 0x30, 0xD1, 0xAE, 0x1B, 0x61, 0xD5, 0x89, 0x36, 0xC5, 0xF3, 0x2A,
            0x77, 0xD0, 0x50, 0xCE, 0xC0, 0xED, 0xC1, 0x36, 0x66, 0x90, 0x43, 0x66, 0x61, 0x38, 0x92, 0x03,
            0x2A, 0x0B, 0x7A, 0xDA, 0xDC, 0x96, 0xE4, 0x35, 0x46, 0x90, 0x49, 0x0E, 0x67, 0xD5, 0xAB, 0x39,
            0x4D, 0xC4, 0xBC, 0xB8, 0xD5, 0x22, 0x05, 0x4D, 0x28, 0x4E, 0x01, 0xA8, 0x40, 0x86, 0x8A, 0x63,
            0xEE, 0x51, 0x04, 0x94, 0x89, 0x66, 0xDC, 0xE1, 0xB9, 0x81, 0xB1, 0x41, 0x41, 0x18, 0x34, 0x13,
            0xCF, 0x8F, 0x5A, 0x56, 0x5A, 0x50, 0xF7, 0x81, 0x89, 0xB7, 0x14, 0xA2, 0x60, 0xAD, 0x4C, 0x57,
            0x47, 0x27, 0xE8, 0x3B, 0x3A, 0xE5, 0xC1, 0x15, 0x64, 0x4D, 0xA5, 0xA8, 0x30, 0x5E, 0xCB, 0x29,
            0x77, 0x8E, 0xF6, 0xD1, 0x03, 0xAC, 0xF4, 0x79, 0xB8, 0x5C, 0xDA, 0xEA, 0x9B, 0xD6, 0x05, 0x12,
            0x9D, 0x90, 0x67, 0x17, 0x39, 0x91, 0x93, 0x65, 0x08, 0x7B, 0xAB, 0xD0, 0xD0, 0x07, 0x4F, 0x3C,
            0x7D, 0x37, 0x0D, 0x03, 0xA6, 0x0B, 0xE1, 0x25, 0x63, 0x57, 0x5E, 0x20, 0x55, 0xB3, 0x5D, 0x33,
            0x35, 0x9C, 0xC3, 0x79, 0xF5, 0xDC, 0x2D, 0x72, 0x28, 0xBB, 0xB2, 0xCC, 0x03, 0x62, 0x76, 0xB4,
            0xCD, 0x8B, 0xB1, 0xA5, 0x55, 0x4F, 0xB8, 0x1D, 0x00, 0x50, 0xB0, 0x66, 0x38, 0xFF, 0xE9, 0x78,
            0x25, 0x28, 0x82, 0xD4, 0xFC, 0xE2, 0x0B, 0x64, 0xEF, 0x16, 0xCC, 0xF5, 0x8D, 0xF5, 0x7A, 0x78,
            0x9E, 0x9C, 0x4B, 0xAC, 0x59, 0xDF, 0x68, 0x47, 0x81, 0x73, 0xC5, 0x59, 0x98, 0x86, 0x10, 0xB0,
            0x3D, 0xC2, 0xC8, 0x53, 0xF0, 0x47, 0x9F, 0xC1, 0x89, 0x74, 0x18, 0x20, 0xEE, 0x84, 0xB4, 0x50,
            0x14, 0x9E, 0x58, 0xEF, 0xF4, 0xE7, 0xE1, 0xD0, 0x4F, 0xDC, 0x58, 0x5B, 0x9D, 0x8C, 0x25, 0xB8,
            0x9C, 0xE0, 0xA7, 0xAE, 0x99, 0x0C, 0x53, 0x35, 0x2A, 0xDA, 0x18, 0x4E, 0x08, 0x38, 0xD4, 0x0B
        };
    }
}
