// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="FEDBC470F57CFDD793B0E2935885CCD5C4764F4B" NAME="TACTLib.ProCMF_41713.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_41713 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) length * header.BuildVersion;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += 3;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) length * header.BuildVersion;
            uint increment = (uint)header.EntryCount + digest[header.EntryCount % SHA1_DIGESTSIZE];
            for (int i = 0; i != length; ++i) {
                kidx += increment;
                buffer[i] = digest[kidx % SHA1_DIGESTSIZE];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x32, 0x76, 0x49, 0x28, 0xFD, 0x60, 0x40, 0xC4, 0x1A, 0x70, 0x33, 0x87, 0xA6, 0x8A, 0x70, 0xB5,
            0x64, 0xE5, 0xC2, 0xC7, 0xA0, 0x15, 0xFE, 0x9D, 0x87, 0xCA, 0x61, 0x6D, 0xC2, 0x12, 0x29, 0x6D,
            0xCC, 0xB1, 0x5B, 0xCA, 0x43, 0x57, 0x55, 0xF5, 0x15, 0xBF, 0x5F, 0x99, 0x3A, 0xD3, 0x67, 0xF9,
            0xD1, 0xD1, 0x94, 0x63, 0xA3, 0xDB, 0xEA, 0xE8, 0x40, 0xCD, 0xE0, 0x1C, 0x4D, 0xBC, 0x55, 0xE1,
            0x60, 0xA5, 0x09, 0x73, 0x98, 0xAF, 0x85, 0xEE, 0xA7, 0x2D, 0x67, 0xF1, 0xDC, 0x25, 0x30, 0x1C,
            0x86, 0xEF, 0x16, 0x01, 0x38, 0x4E, 0xCA, 0x64, 0xE3, 0x2E, 0xF8, 0xF9, 0xA8, 0x48, 0xD4, 0x2F,
            0x9C, 0x95, 0xC3, 0x23, 0x0D, 0x84, 0x87, 0xE8, 0x05, 0xFB, 0xE5, 0xA7, 0xBF, 0xA9, 0x87, 0xE4,
            0xA9, 0x11, 0x56, 0x74, 0x30, 0x8A, 0xDF, 0x7F, 0xA1, 0x02, 0xD4, 0xCA, 0xF3, 0xCF, 0x48, 0x23,
            0x5A, 0x5E, 0xC2, 0x59, 0x3F, 0xA7, 0x2D, 0x5D, 0xF2, 0xBF, 0x7A, 0x96, 0xC8, 0x7F, 0x1D, 0x00,
            0xF7, 0x36, 0x8E, 0x15, 0x78, 0x17, 0x52, 0xBA, 0xB9, 0x7F, 0xA2, 0x24, 0xE5, 0x71, 0xBD, 0x85,
            0x65, 0x12, 0x9C, 0xB9, 0x97, 0xDA, 0x29, 0x26, 0x06, 0x0F, 0x5C, 0xB7, 0xAC, 0x5F, 0x11, 0x42,
            0xEF, 0xB2, 0xF0, 0xB2, 0x61, 0xFC, 0xAA, 0xFD, 0x2A, 0x69, 0x2D, 0x58, 0x3B, 0x25, 0x50, 0x84,
            0x97, 0xD8, 0xAC, 0x35, 0x52, 0x67, 0x68, 0x8A, 0xAC, 0xAF, 0x8D, 0x28, 0x69, 0x74, 0x5C, 0xD5,
            0x5A, 0xB5, 0x4B, 0xB8, 0xB9, 0x27, 0xE5, 0x81, 0xD9, 0xF2, 0xCE, 0x62, 0x00, 0x8A, 0xE8, 0x58,
            0x02, 0xCD, 0x83, 0x07, 0x07, 0xFF, 0x78, 0x5C, 0x8C, 0x49, 0xE6, 0x12, 0x93, 0xBD, 0xB8, 0xE3,
            0x1F, 0xF4, 0xF6, 0x2E, 0xCD, 0x5E, 0x7E, 0x69, 0xF2, 0x0B, 0xF9, 0xE5, 0x7D, 0x17, 0x0E, 0xFD,
            0x3A, 0x33, 0x69, 0x25, 0x00, 0x74, 0x91, 0xAA, 0x40, 0x71, 0x96, 0xB4, 0x82, 0x66, 0xD2, 0x77,
            0xE9, 0x3E, 0x34, 0x6A, 0xC2, 0x5A, 0x73, 0xE9, 0x6C, 0x5D, 0xC1, 0x2C, 0x06, 0xEB, 0xBF, 0x64,
            0x15, 0xC1, 0x64, 0xA6, 0x59, 0x4A, 0x5E, 0x8A, 0xDA, 0x46, 0xFB, 0x9F, 0x09, 0xF7, 0xF1, 0x1F,
            0x41, 0xE6, 0x98, 0x50, 0x62, 0xC9, 0xE5, 0x2A, 0x09, 0x44, 0x47, 0xDE, 0x82, 0x80, 0x90, 0x8A,
            0x51, 0x3A, 0xCE, 0xAE, 0x0A, 0x62, 0x47, 0x77, 0xE8, 0xB1, 0xE1, 0x34, 0x60, 0xDD, 0xDF, 0x7B,
            0x5E, 0x60, 0x25, 0xC0, 0x47, 0x97, 0x74, 0x12, 0x07, 0x66, 0xC4, 0x8F, 0x39, 0x00, 0x5E, 0x3E,
            0x8E, 0xB6, 0x66, 0x1B, 0x4A, 0x84, 0x33, 0xF1, 0x0A, 0xD0, 0xB6, 0x03, 0x65, 0x0F, 0xA7, 0xB8,
            0x98, 0xDB, 0xF3, 0xC1, 0x96, 0xF5, 0xA0, 0xD6, 0x59, 0x03, 0x4B, 0x57, 0xD9, 0x60, 0xB0, 0xB6,
            0xCE, 0xE5, 0x0A, 0xAF, 0xBF, 0x94, 0x19, 0x17, 0xF4, 0xAA, 0xB3, 0x56, 0xE2, 0xA5, 0x66, 0xD2,
            0xB4, 0x8A, 0x27, 0x82, 0x14, 0xD9, 0xDA, 0xCC, 0x6E, 0x26, 0xB8, 0x8B, 0x95, 0x73, 0x19, 0x0A,
            0x33, 0x1C, 0xD6, 0x86, 0x66, 0xF3, 0xE4, 0x27, 0x76, 0xC8, 0x27, 0xF7, 0x9D, 0x55, 0x52, 0x80,
            0x1D, 0x14, 0x23, 0x2F, 0x72, 0xF4, 0xF8, 0x56, 0x05, 0xAA, 0x17, 0x2B, 0xF4, 0x21, 0xC5, 0x96,
            0xEE, 0x7D, 0x74, 0x7E, 0x2F, 0xA8, 0xC0, 0x0D, 0x32, 0x57, 0x66, 0xA4, 0x0A, 0x4F, 0xB0, 0x4C,
            0x4A, 0x8F, 0x51, 0x79, 0x58, 0x9D, 0xE0, 0x68, 0x92, 0x80, 0x9E, 0x16, 0x06, 0x4A, 0xA3, 0xA2,
            0xBE, 0xD0, 0xEA, 0x32, 0x47, 0xBA, 0x93, 0x79, 0xDA, 0x29, 0xCE, 0x05, 0x81, 0xDC, 0xEE, 0x54,
            0x39, 0x34, 0x7A, 0x4C, 0x0E, 0x68, 0xD3, 0xC9, 0x23, 0xDF, 0x38, 0x52, 0xC8, 0xA4, 0x4F, 0xE4
        };
    }
}
