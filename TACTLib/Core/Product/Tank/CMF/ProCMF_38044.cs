// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="8E802688BBB213599BD7D2325C7E1B215FD9B87F" NAME="TACTLib.ProCMF_38044.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, BuildVersions = new uint[] {38024}, Product = TACTProduct.Overwatch)]
    public class ProCMF_38044 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[length + 256];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += 3;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Constrain(length * header.BuildVersion);
            uint increment = kidx % 29;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= (byte) ((digest[(kidx + header.EntryCount) % SHA1_DIGESTSIZE] + 1) % 0xFF);
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xFB, 0x92, 0x4F, 0xA4, 0x7C, 0x92, 0x12, 0x7D, 0xF4, 0x6B, 0x95, 0x17, 0x35, 0x1E, 0x2C, 0x6E,
            0xF5, 0xF8, 0x81, 0x1D, 0xFA, 0x67, 0x94, 0x79, 0xC5, 0xAD, 0xBE, 0x5B, 0xE2, 0xD8, 0x93, 0x4A,
            0x80, 0x5A, 0x1B, 0xCC, 0xB4, 0x98, 0x0A, 0xBB, 0x63, 0x85, 0x08, 0xEE, 0xC0, 0xC7, 0x44, 0x8A,
            0x78, 0x5C, 0xFF, 0x16, 0x29, 0x43, 0x51, 0xE2, 0x48, 0x87, 0x65, 0x28, 0xC3, 0x6D, 0x1D, 0x94,
            0xE5, 0xB6, 0xB6, 0xBD, 0x0F, 0x15, 0x5D, 0x58, 0x87, 0xCA, 0x22, 0x36, 0x0A, 0xE9, 0x15, 0x1C,
            0x28, 0xDF, 0x5A, 0x5B, 0xA8, 0x83, 0x20, 0xA8, 0x18, 0xB2, 0x73, 0x85, 0x54, 0x61, 0xAF, 0x11,
            0x06, 0x26, 0x93, 0x03, 0x07, 0xA3, 0xAD, 0xAB, 0xEB, 0xA8, 0x1F, 0xEA, 0x9A, 0x18, 0x4E, 0x35,
            0xCA, 0xCF, 0x02, 0xBC, 0xF2, 0x97, 0xBA, 0xC5, 0x66, 0xD2, 0x0E, 0xAC, 0x79, 0x07, 0x14, 0x3E,
            0xFB, 0x24, 0x9E, 0xDD, 0xBE, 0xF3, 0x62, 0x61, 0xD0, 0x87, 0xB4, 0xA7, 0xE3, 0x2A, 0xC7, 0xA8,
            0xAD, 0x64, 0x37, 0x76, 0xA7, 0x62, 0x8D, 0x4A, 0x2C, 0x27, 0x4A, 0x8C, 0x3B, 0xE0, 0x17, 0x35,
            0xCB, 0x79, 0x21, 0x03, 0x07, 0x89, 0xD3, 0x64, 0x38, 0xDA, 0xC3, 0x58, 0x4F, 0xCF, 0xFC, 0xFC,
            0x3B, 0xC1, 0x06, 0x6D, 0x15, 0x07, 0xA7, 0x6F, 0x96, 0x0C, 0x41, 0xA1, 0xC9, 0x97, 0xFF, 0xA3,
            0x2E, 0x92, 0xF9, 0x1B, 0x86, 0x69, 0x0A, 0x60, 0x0A, 0x96, 0xDC, 0x5F, 0xB6, 0x0B, 0x06, 0xE1,
            0x27, 0xB6, 0xF9, 0xD5, 0xDE, 0xC6, 0x9E, 0x1D, 0xFC, 0xBB, 0x69, 0x5D, 0x4A, 0x61, 0x0D, 0x98,
            0x79, 0x6E, 0x90, 0x17, 0x5D, 0x2E, 0x30, 0x75, 0xAF, 0xE7, 0xE2, 0xC2, 0xE6, 0x26, 0x80, 0x83,
            0xAB, 0x8E, 0x95, 0x92, 0x0D, 0x93, 0xF2, 0x8F, 0x83, 0x77, 0x8C, 0xCC, 0xF1, 0x6D, 0xF0, 0xC6,
            0xFD, 0x78, 0xCF, 0xFB, 0xBC, 0xE9, 0x5D, 0x08, 0x5D, 0x22, 0xE7, 0x59, 0xB4, 0x39, 0x91, 0x90,
            0x5D, 0x0E, 0x55, 0xEB, 0x2C, 0xC7, 0xBC, 0x84, 0x66, 0x4A, 0x41, 0xD1, 0x52, 0xA0, 0x1D, 0x44,
            0x86, 0xCE, 0x04, 0x15, 0x8C, 0x4D, 0x22, 0x3B, 0x35, 0x4A, 0xA8, 0xC8, 0x8E, 0x86, 0xC3, 0x49,
            0xB0, 0x07, 0x68, 0xA7, 0xA4, 0x7C, 0x3C, 0x72, 0xFD, 0x5C, 0x26, 0xC0, 0x33, 0x5B, 0x2F, 0x96,
            0xD7, 0xDE, 0x4E, 0x81, 0xF0, 0x1F, 0xEB, 0x43, 0x3F, 0xC2, 0x5D, 0x33, 0x9C, 0x81, 0xCE, 0x45,
            0xC9, 0x3C, 0x9B, 0x2C, 0xC9, 0xDC, 0xE8, 0xC7, 0x81, 0x49, 0x56, 0xEB, 0x22, 0xEA, 0x91, 0x26,
            0xB5, 0x56, 0x37, 0x1D, 0xB5, 0x5F, 0x99, 0x5A, 0xB5, 0x85, 0xBD, 0xD2, 0x01, 0x87, 0xFE, 0xCF,
            0x70, 0x90, 0x59, 0xBA, 0xC3, 0x8B, 0x61, 0x25, 0x87, 0x66, 0xCE, 0x4C, 0x94, 0x7D, 0x95, 0x24,
            0xF6, 0x14, 0xCE, 0x92, 0x70, 0xB9, 0xAB, 0xB6, 0x66, 0x1E, 0x62, 0x20, 0x91, 0x21, 0x28, 0x4B,
            0x85, 0x38, 0xDC, 0x0F, 0x5C, 0x6C, 0xC2, 0x4D, 0x2D, 0x60, 0x09, 0x8A, 0x66, 0xD5, 0x7C, 0x01,
            0xE6, 0xEF, 0xDF, 0x62, 0x20, 0x77, 0xAD, 0xF7, 0xF1, 0xAB, 0xB8, 0x05, 0xDB, 0xA1, 0x59, 0xDA,
            0xDC, 0x35, 0x95, 0xD1, 0x79, 0x12, 0x43, 0xB6, 0x9A, 0x04, 0xE0, 0x29, 0x95, 0x4D, 0x27, 0x51,
            0xDB, 0x9E, 0x38, 0xA4, 0x53, 0xC3, 0xBB, 0xCF, 0xBC, 0xB5, 0xB5, 0x4E, 0xC6, 0x22, 0x19, 0xD3,
            0x5B, 0xA4, 0x3D, 0x67, 0xAA, 0xB8, 0x08, 0xE9, 0x34, 0xC0, 0x7A, 0x4F, 0xBB, 0x99, 0xA4, 0x2A,
            0x36, 0xE0, 0x32, 0x38, 0xB3, 0x49, 0xC4, 0x9E, 0x0D, 0xDE, 0x5E, 0x49, 0x13, 0x18, 0x17, 0xD1,
            0x31, 0x14, 0xC3, 0x88, 0x2F, 0xF4, 0x60, 0x5A, 0x5B, 0xDE, 0x83, 0x49, 0xA4, 0xF2, 0x03, 0xF6
        };
    }
}
