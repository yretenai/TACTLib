// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="F82C4BD4A9E652048EBDD676165CC69BC5A1E7FC" NAME="TACTLib.ProCMF_38459.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_38459 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[length + 256];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += (uint)header.EntryCount;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[(2 * digest[13] - length) % 512];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                buffer[i] = digest[(i + kidx) % SHA1_DIGESTSIZE];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xA9, 0xD9, 0x35, 0x16, 0x46, 0xF4, 0x84, 0x2A, 0x2E, 0xD6, 0x9D, 0x01, 0x2F, 0xBD, 0x2E, 0xAD,
            0xE0, 0x1C, 0xD7, 0x63, 0xD8, 0x69, 0x9A, 0x8E, 0xC0, 0x0D, 0x65, 0x7F, 0x72, 0x44, 0xEB, 0x8E,
            0x66, 0x12, 0xBC, 0xC0, 0x5E, 0x9F, 0x29, 0x3C, 0xD5, 0xFF, 0x8A, 0x1B, 0x40, 0x50, 0x52, 0xDE,
            0xC1, 0xA5, 0x29, 0xE4, 0xD2, 0x77, 0x8E, 0x8B, 0xB3, 0xBF, 0x7B, 0x09, 0x39, 0xBB, 0x26, 0xAC,
            0x44, 0x62, 0x2A, 0x00, 0x00, 0x97, 0x71, 0x1D, 0x56, 0xE6, 0xF0, 0xEF, 0x18, 0x24, 0xC1, 0xB1,
            0x7B, 0x37, 0xF9, 0xBB, 0xE3, 0x21, 0xE7, 0xC7, 0xBB, 0x8F, 0x98, 0xBF, 0xB9, 0xD1, 0xAF, 0xA9,
            0xD8, 0x04, 0xB4, 0xEC, 0x30, 0x8D, 0x13, 0xCA, 0xC0, 0xF3, 0xEF, 0x09, 0x6C, 0x2C, 0x2C, 0xD8,
            0x9C, 0x20, 0x36, 0xC0, 0x92, 0xAE, 0xEB, 0x78, 0xC6, 0xF5, 0x79, 0xD9, 0x93, 0x35, 0x2D, 0x19,
            0xC5, 0xE1, 0x29, 0xC1, 0x76, 0xA2, 0x85, 0x08, 0x51, 0x2F, 0x52, 0x23, 0x7B, 0x27, 0x0A, 0x6E,
            0xF2, 0x45, 0xB7, 0x60, 0xB9, 0xE0, 0xBA, 0x57, 0xCC, 0x59, 0x59, 0x38, 0x30, 0x1B, 0xA3, 0x39,
            0x8A, 0xD6, 0x38, 0x2D, 0x4A, 0xE8, 0x9C, 0x6C, 0xEF, 0xC8, 0x7D, 0x0B, 0xD5, 0xF6, 0xFF, 0x5D,
            0x20, 0xCE, 0xA7, 0xA9, 0x4A, 0x33, 0x60, 0xDB, 0xBC, 0xC4, 0x1F, 0x8E, 0x2C, 0x27, 0xBA, 0x7A,
            0xBB, 0x5C, 0x66, 0x2C, 0x81, 0x13, 0x30, 0xD0, 0xC4, 0x8A, 0xCC, 0x18, 0x55, 0xA6, 0x32, 0xBB,
            0x10, 0x0D, 0xA0, 0x30, 0xEE, 0x9D, 0x77, 0x1A, 0xC7, 0xCC, 0x9C, 0x7E, 0xE4, 0x9B, 0xFD, 0x94,
            0x9E, 0xFD, 0x8B, 0x09, 0x1B, 0x27, 0x0C, 0x85, 0x38, 0x28, 0x6A, 0x58, 0x8C, 0xB6, 0x24, 0x5A,
            0xD0, 0x07, 0xE8, 0x9A, 0xE7, 0x20, 0x5D, 0xCE, 0xD4, 0x64, 0x01, 0xF9, 0xCF, 0xD3, 0x72, 0xA0,
            0x4C, 0x6A, 0x33, 0x80, 0x89, 0xBC, 0x52, 0x55, 0x26, 0xE8, 0x71, 0xA4, 0x83, 0x12, 0x54, 0x19,
            0x53, 0xB9, 0xF5, 0x25, 0x6C, 0x8D, 0x38, 0x63, 0x5A, 0xD7, 0xF3, 0xE9, 0x14, 0x68, 0x33, 0xD4,
            0x9C, 0xE1, 0xF4, 0x5B, 0x2E, 0x22, 0x9A, 0x08, 0x73, 0xEF, 0xE6, 0x86, 0xC5, 0xA0, 0x76, 0x6E,
            0x0D, 0x4A, 0x13, 0xF4, 0xB2, 0x6D, 0xB2, 0xE8, 0xBB, 0xC3, 0x10, 0xAA, 0xBF, 0x03, 0x03, 0x7A,
            0x62, 0x49, 0x31, 0x9A, 0x3D, 0xA7, 0xEC, 0x7D, 0xCC, 0x4A, 0xC2, 0x8A, 0xB9, 0x65, 0x68, 0xBC,
            0x09, 0x96, 0x0D, 0x6A, 0xAC, 0x0C, 0x49, 0x34, 0x9D, 0xD8, 0xF6, 0xC1, 0x18, 0xEB, 0xD3, 0x80,
            0x38, 0xC2, 0xC8, 0x91, 0x27, 0x67, 0xC7, 0x47, 0xCD, 0x74, 0xF4, 0x09, 0x38, 0xA4, 0x1B, 0x35,
            0xDD, 0x97, 0xBF, 0x7A, 0x40, 0xEC, 0x8B, 0xC0, 0xA3, 0xF8, 0xFE, 0x1A, 0x7A, 0x54, 0x45, 0x51,
            0x15, 0xD7, 0x9B, 0xCE, 0x23, 0xB4, 0x33, 0x90, 0x5B, 0x63, 0xD2, 0xF9, 0xCE, 0xF0, 0x9A, 0xC1,
            0x79, 0xFD, 0xCF, 0x53, 0x50, 0x1C, 0x43, 0x70, 0x6D, 0xF2, 0xBF, 0x45, 0xD0, 0xFA, 0xE8, 0xCA,
            0xA8, 0x49, 0xC6, 0x2A, 0xBD, 0xBA, 0x78, 0x37, 0x5B, 0x82, 0xCC, 0x9D, 0x55, 0x57, 0x44, 0x9A,
            0xDE, 0xAA, 0xF7, 0xB9, 0x15, 0x2C, 0xA4, 0x32, 0x4C, 0xFD, 0xE2, 0xC2, 0xE3, 0xBE, 0x72, 0x30,
            0x97, 0x1B, 0xDD, 0xDF, 0xA8, 0x8D, 0x8F, 0x35, 0x8F, 0x23, 0xE8, 0xA8, 0x9E, 0x84, 0xE1, 0x78,
            0x87, 0xD6, 0x7D, 0x57, 0xF9, 0x00, 0x32, 0xE7, 0x85, 0xAA, 0x84, 0x17, 0xBE, 0xCD, 0x55, 0x77,
            0x57, 0x98, 0x6B, 0xB5, 0xF0, 0x20, 0x99, 0x7D, 0x05, 0xB5, 0x21, 0x74, 0x45, 0x03, 0x05, 0x7A,
            0x87, 0x1B, 0x81, 0xFA, 0x90, 0x98, 0xFB, 0xA8, 0x2A, 0xD9, 0xBD, 0x4C, 0x21, 0xC5, 0xA5, 0xDE
        };
    }
}
