// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="4968FDD6C757F0843BA7FC98F3B6972EA5216AA4" NAME="TACTLib.ProCMF_39103.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_39103 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Constrain(length * header.BuildVersion);
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += (uint)header.EntryCount;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[2 * digest[13] - length];
            uint ividx = header.BuildVersion;
            uint increment = (uint)header.EntryCount + digest[header.EntryCount % SHA1_DIGESTSIZE];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= digest[ividx++ % SHA1_DIGESTSIZE];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xE3, 0xBA, 0x8D, 0xCC, 0xA5, 0xC5, 0x26, 0xBB, 0x5A, 0xC5, 0x2D, 0xDE, 0x20, 0x73, 0x1D, 0xC3,
            0xA5, 0x88, 0x52, 0x05, 0xD6, 0x87, 0xED, 0xD3, 0x1D, 0x8D, 0x3A, 0x64, 0x9B, 0xDD, 0x3D, 0x04,
            0x7A, 0xBA, 0x6B, 0x3E, 0xB3, 0x54, 0x99, 0xD2, 0x92, 0x93, 0xE1, 0xF6, 0x80, 0xC0, 0xC4, 0xFF,
            0x10, 0x62, 0xAA, 0xF9, 0xFD, 0xBB, 0xC5, 0xE9, 0xA6, 0xD2, 0x52, 0x23, 0xB4, 0xA7, 0x3D, 0x73,
            0xC9, 0x0A, 0xFF, 0x16, 0x79, 0x40, 0x89, 0x47, 0x86, 0xFC, 0x9F, 0x79, 0xBA, 0xBC, 0x21, 0x94,
            0x52, 0x8F, 0x23, 0xE6, 0x65, 0x5F, 0x3E, 0xC4, 0x72, 0x58, 0x16, 0x9D, 0xFF, 0x3B, 0x18, 0xD2,
            0x9E, 0xD0, 0x47, 0xA2, 0xD9, 0x8D, 0x23, 0x5F, 0xFA, 0x98, 0x6A, 0x1B, 0x2A, 0x61, 0xE7, 0x98,
            0x61, 0xA3, 0x0A, 0x8A, 0x6E, 0x57, 0xFC, 0x38, 0x1A, 0x60, 0x62, 0xED, 0x19, 0xD4, 0x61, 0x34,
            0x94, 0x02, 0xF3, 0x05, 0x8C, 0x2F, 0x1F, 0x71, 0xCC, 0x27, 0xA2, 0x90, 0xF8, 0x5B, 0x48, 0xE1,
            0x62, 0xF4, 0xAA, 0xDC, 0xE9, 0x14, 0x3D, 0x50, 0x2B, 0xA8, 0x00, 0xB5, 0x3B, 0x67, 0x30, 0x09,
            0x6F, 0x1E, 0x0D, 0x53, 0xEF, 0xCF, 0x72, 0x45, 0xD7, 0xE4, 0x72, 0xC5, 0x73, 0x37, 0x21, 0xF4,
            0xB1, 0x12, 0xFA, 0xB5, 0xD0, 0x69, 0x9F, 0x23, 0xC7, 0x24, 0x39, 0x3D, 0x3A, 0xFE, 0x65, 0x7D,
            0xBA, 0xA8, 0xDE, 0x71, 0x3B, 0x4D, 0x61, 0x23, 0xDA, 0xB0, 0x62, 0x83, 0x2B, 0x8F, 0x47, 0x2C,
            0x45, 0xDE, 0xC8, 0x1B, 0x6B, 0xB8, 0x38, 0x41, 0xD4, 0xFD, 0xD9, 0x78, 0xB9, 0x07, 0x46, 0x68,
            0x44, 0x14, 0x12, 0xF7, 0xDD, 0xF0, 0x91, 0xF9, 0x65, 0x92, 0xC3, 0x24, 0x8A, 0x25, 0xD6, 0xE7,
            0x5A, 0xC9, 0x26, 0xC4, 0xD3, 0x7B, 0x76, 0x2D, 0x7E, 0x35, 0xE7, 0xE3, 0x07, 0x00, 0x61, 0xDA,
            0xF7, 0x15, 0x92, 0xDC, 0xF9, 0xAC, 0x2E, 0x8E, 0x8C, 0x01, 0x36, 0xF5, 0xC1, 0xE9, 0x58, 0x02,
            0x1D, 0x02, 0x45, 0x72, 0x3D, 0xC8, 0x8F, 0x02, 0xF4, 0x31, 0xCA, 0x0C, 0x11, 0xCE, 0xFD, 0x80,
            0x07, 0x26, 0x2F, 0x35, 0x35, 0xF2, 0xE0, 0xE8, 0x3D, 0xC5, 0x8F, 0x24, 0x69, 0x55, 0xF2, 0xC5,
            0x5F, 0xE8, 0xC8, 0xBC, 0xA2, 0x22, 0xB1, 0xA8, 0xEC, 0xB7, 0x5E, 0x45, 0xEA, 0x29, 0xD3, 0x44,
            0x55, 0xCB, 0x41, 0x7A, 0xC8, 0x25, 0x07, 0x90, 0x22, 0xC9, 0xB2, 0x04, 0x38, 0xE2, 0x45, 0xEB,
            0x25, 0x16, 0x42, 0xDD, 0x01, 0xBC, 0xD2, 0xFC, 0x6E, 0x6B, 0x8D, 0xB5, 0xA4, 0x50, 0xE6, 0x4B,
            0xCB, 0x5A, 0x3B, 0xD8, 0x34, 0x05, 0xDD, 0xD2, 0x29, 0xC6, 0xE2, 0x89, 0x30, 0xAC, 0x9C, 0x8D,
            0xF2, 0x24, 0xAD, 0x3B, 0x07, 0x95, 0x42, 0x34, 0x9B, 0xEE, 0xC3, 0xAA, 0xFB, 0x88, 0xC4, 0x46,
            0x15, 0x17, 0xD2, 0xAF, 0xA7, 0x72, 0x7D, 0xBE, 0x5F, 0x38, 0x50, 0x03, 0x84, 0x42, 0xB2, 0x4C,
            0xCE, 0xC5, 0x38, 0x31, 0xED, 0xBF, 0xE2, 0x11, 0xD5, 0x5F, 0xEB, 0x18, 0x54, 0x5F, 0x08, 0x50,
            0x62, 0x04, 0xEF, 0xB3, 0xAE, 0x25, 0x54, 0xB8, 0xE5, 0x66, 0x30, 0xFD, 0x72, 0x57, 0x4C, 0xE4,
            0x43, 0xA6, 0xFE, 0x3B, 0x68, 0x54, 0x57, 0xF6, 0x9C, 0x54, 0x63, 0x5E, 0xB4, 0x38, 0x4A, 0xAD,
            0xE8, 0xAF, 0x5D, 0x49, 0x3A, 0x9E, 0x64, 0x2A, 0x36, 0x49, 0xCF, 0x8E, 0x24, 0xD0, 0x67, 0xE3,
            0x8E, 0xD9, 0xE1, 0xD8, 0xDA, 0x13, 0x7D, 0xA3, 0x7E, 0xBB, 0x5B, 0x0C, 0x07, 0x3E, 0x01, 0x26,
            0x93, 0x0C, 0xD6, 0x47, 0xE4, 0xD1, 0xBD, 0xAA, 0x8D, 0x0F, 0xFD, 0xA4, 0xC7, 0x11, 0x93, 0x15,
            0x3E, 0xC7, 0x96, 0x49, 0xEB, 0x3F, 0x09, 0x34, 0xA1, 0x9D, 0xD1, 0x28, 0x3C, 0x3B, 0xDE, 0xBC
        };
    }
}
