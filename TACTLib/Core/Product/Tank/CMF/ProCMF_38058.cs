// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="3FF89E4006BA1A3F49A383376F38A46C4DE43C60" NAME="TACTLib.ProCMF_38058.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_38058 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Constrain(header.BuildVersion * length);
            uint increment = kidx % 61;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) (digest[7] + (ushort) (header.DataCount & 511));
            uint increment = (uint)header.EntryCount + digest[header.EntryCount % SHA1_DIGESTSIZE];
            uint digestIdx = header.BuildVersion;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= digest[digestIdx % SHA1_DIGESTSIZE];
                ++digestIdx;
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0xD6, 0x85, 0xF6, 0x42, 0x61, 0x04, 0x73, 0x1B, 0x4C, 0x69, 0x34, 0x9D, 0xDF, 0xFB, 0x07, 0xF4,
            0xE6, 0xD0, 0x94, 0xCD, 0x7E, 0xBB, 0x78, 0xCA, 0x23, 0x1C, 0xFA, 0xAA, 0x99, 0x9F, 0xAA, 0x1F,
            0xD8, 0x86, 0xDE, 0x0A, 0xC0, 0xA3, 0x0A, 0x93, 0x52, 0x0A, 0x18, 0x46, 0x41, 0x82, 0xDB, 0x62,
            0x31, 0xAB, 0x74, 0xCE, 0x72, 0x41, 0xBA, 0xD2, 0x50, 0x50, 0xA0, 0x7E, 0xCE, 0x7C, 0x0C, 0xB9,
            0x45, 0x9B, 0x5F, 0x96, 0x0B, 0xFA, 0x6F, 0x3F, 0x9E, 0xD5, 0x94, 0x15, 0xBE, 0x36, 0x14, 0x80,
            0xAB, 0xC7, 0x76, 0x63, 0x6D, 0x69, 0xD2, 0x34, 0x6F, 0xB0, 0x37, 0x47, 0xE2, 0xA2, 0xA8, 0x2F,
            0x74, 0x00, 0x67, 0x7F, 0x20, 0xC7, 0x2F, 0xAD, 0xDC, 0x94, 0xC6, 0xA3, 0x9F, 0x37, 0x38, 0x96,
            0xEF, 0xD6, 0x94, 0x30, 0xB1, 0x20, 0x52, 0x5A, 0xB9, 0x5F, 0xF0, 0x5F, 0x99, 0x90, 0x8A, 0x8F,
            0xA4, 0xCF, 0x69, 0x53, 0xBB, 0x84, 0x31, 0xF0, 0x6F, 0x81, 0x50, 0xDB, 0x34, 0xBB, 0x61, 0x26,
            0x06, 0xC4, 0xDA, 0xAF, 0xA8, 0xB1, 0x08, 0x16, 0x13, 0x60, 0xA3, 0x83, 0x34, 0x88, 0xAA, 0x1C,
            0xD4, 0xC5, 0xD3, 0x12, 0xBE, 0x1B, 0x9D, 0xE8, 0xD1, 0x1C, 0xDB, 0x33, 0xC3, 0xA1, 0x16, 0x1B,
            0x90, 0xB0, 0xA5, 0x3A, 0xA4, 0xD2, 0x56, 0x37, 0xFF, 0xCF, 0x10, 0xDB, 0xC3, 0xAC, 0xBA, 0xCB,
            0x7F, 0xA8, 0x28, 0x32, 0x95, 0x73, 0xAC, 0xD1, 0xAB, 0x50, 0xF0, 0x98, 0x77, 0xDC, 0xDE, 0x87,
            0xF1, 0x16, 0xEA, 0xCB, 0x03, 0x15, 0xA5, 0xD4, 0xC9, 0xDF, 0x43, 0xF6, 0x18, 0x9B, 0x96, 0xC8,
            0xA2, 0x9B, 0x19, 0x48, 0xCA, 0x71, 0x1B, 0xE9, 0xE0, 0xDB, 0xE0, 0xC0, 0x27, 0x0E, 0x86, 0xA6,
            0x8D, 0xFB, 0x2D, 0x8F, 0x00, 0x17, 0xF7, 0x47, 0xD4, 0xA5, 0xA5, 0x7B, 0x76, 0xC5, 0x97, 0x4A,
            0x4B, 0x5A, 0x77, 0xE9, 0x8D, 0x05, 0xC4, 0x4B, 0x6F, 0x8C, 0x02, 0x86, 0x34, 0x35, 0x36, 0x66,
            0xCE, 0x11, 0xD8, 0x6A, 0x42, 0xA8, 0x51, 0x48, 0xC3, 0x66, 0x5B, 0xF7, 0xD7, 0x58, 0xB0, 0x96,
            0x27, 0x7C, 0xC3, 0x2E, 0xEA, 0xE1, 0x0D, 0x22, 0xBB, 0x5C, 0xBA, 0x63, 0x04, 0xFE, 0x64, 0xCB,
            0x52, 0x38, 0x4A, 0x6F, 0x9E, 0xD8, 0xB7, 0x9C, 0xAD, 0x84, 0xE0, 0x23, 0x7C, 0x4E, 0x3B, 0x2A,
            0x64, 0x68, 0xB1, 0x3C, 0xA2, 0x64, 0xC2, 0x28, 0x76, 0xD4, 0x07, 0xE8, 0xD1, 0x8E, 0xFB, 0xEA,
            0x4B, 0xE2, 0x9D, 0x6E, 0x5C, 0x32, 0xA4, 0xD1, 0xD3, 0x0E, 0x65, 0xDE, 0xB3, 0xA5, 0xAE, 0xC6,
            0x65, 0x22, 0xAB, 0x8E, 0xB6, 0xD7, 0xD7, 0x14, 0x82, 0xA5, 0x68, 0x9A, 0xC3, 0xD6, 0xCE, 0xF8,
            0x29, 0xA4, 0x73, 0x62, 0xA7, 0x37, 0x1F, 0x10, 0x4B, 0xC2, 0xE1, 0xF9, 0x9F, 0x00, 0x86, 0x5B,
            0xF0, 0x40, 0x87, 0xE3, 0xEB, 0x6F, 0x6B, 0x3B, 0x17, 0x47, 0x00, 0xC4, 0x68, 0xBC, 0x02, 0xC0,
            0x5D, 0x7C, 0xD6, 0x23, 0x9C, 0x28, 0x21, 0x6B, 0xE8, 0x40, 0xB5, 0xFD, 0x21, 0xE4, 0x5F, 0x59,
            0x05, 0xA5, 0xBF, 0x0B, 0x71, 0xF3, 0x59, 0xA3, 0xA4, 0xB4, 0xF5, 0x7B, 0xFD, 0xCF, 0x65, 0xA8,
            0x4D, 0xF1, 0xE7, 0x30, 0xD9, 0xEC, 0xAD, 0x93, 0x9D, 0x6C, 0x54, 0xE0, 0x4F, 0x35, 0x99, 0xED,
            0x33, 0xF2, 0x48, 0x3C, 0xFE, 0x16, 0xC5, 0x09, 0xA0, 0x7B, 0xA0, 0x8E, 0xC3, 0x1A, 0x99, 0x04,
            0xDD, 0x41, 0xFA, 0xC7, 0x40, 0x16, 0x1E, 0x42, 0x17, 0xC6, 0x5A, 0xB2, 0x0E, 0xD5, 0x80, 0x93,
            0xA3, 0x43, 0x5F, 0x37, 0xA5, 0xBB, 0x5B, 0xB8, 0xFD, 0x7E, 0x8B, 0x81, 0x6D, 0x42, 0x5C, 0x2E,
            0x5C, 0xA9, 0xA5, 0x3B, 0x5D, 0xEE, 0x2A, 0xF8, 0x22, 0x77, 0x31, 0x63, 0xBD, 0xD1, 0xF0, 0x25
        };
    }
}
