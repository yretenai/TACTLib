// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="EADF2B72A4E91E33521AA701D9719FD9626A8DDB" NAME="TACTLib.ProCMF_39425.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_39425 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.BuildVersion & 511];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += (uint)header.EntryCount;
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[(2 * digest[13] - length) % 512];
            uint increment = (uint)header.EntryCount + digest[header.EntryCount % SHA1_DIGESTSIZE];
            for (int i = 0; i != length; ++i) {
                kidx += increment;
                buffer[i] = digest[kidx % SHA1_DIGESTSIZE];
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x0D, 0xE7, 0x60, 0x2E, 0x0E, 0x4C, 0x2E, 0x35, 0xA0, 0x59, 0xC7, 0xE3, 0xCC, 0xEB, 0xEB, 0x99,
            0x1C, 0x94, 0xB2, 0xC8, 0xD3, 0x42, 0x20, 0xB3, 0x1F, 0x91, 0x4A, 0x15, 0xD2, 0xD7, 0xF5, 0xC3,
            0x93, 0x01, 0x24, 0x11, 0xEA, 0x0C, 0x26, 0x5C, 0xB4, 0x79, 0x65, 0x06, 0xEA, 0x7C, 0x06, 0x34,
            0x11, 0x52, 0x08, 0x59, 0x2A, 0x45, 0xE3, 0x4B, 0xA0, 0xAF, 0x6E, 0x8D, 0xA9, 0xF5, 0xB9, 0x84,
            0x86, 0x54, 0xF6, 0xAD, 0x85, 0x2C, 0xF4, 0x1E, 0x39, 0xDD, 0xDA, 0x95, 0x4C, 0xC2, 0x57, 0xE6,
            0xE1, 0x9B, 0x27, 0xFF, 0xE7, 0xA4, 0xCD, 0xCF, 0x53, 0xE6, 0x83, 0x89, 0xE3, 0xE2, 0x43, 0x56,
            0xDD, 0xD4, 0xB2, 0x04, 0xE5, 0x43, 0x7E, 0xD0, 0x75, 0x30, 0x33, 0x75, 0x5D, 0x27, 0x72, 0x53,
            0x5B, 0xCC, 0x3C, 0x90, 0xB7, 0xFE, 0x8A, 0xB5, 0xD2, 0xCB, 0xE2, 0xD6, 0x06, 0x26, 0x12, 0xF4,
            0xEC, 0x13, 0xAF, 0xE9, 0xF6, 0x74, 0xF5, 0x25, 0x9A, 0x55, 0x04, 0xFB, 0xAE, 0x29, 0x44, 0x3F,
            0xA3, 0x3E, 0xE3, 0x9B, 0x72, 0xFD, 0xA4, 0x25, 0x87, 0x18, 0x2D, 0x33, 0xCB, 0x5D, 0x1E, 0x29,
            0x6A, 0xFB, 0x5C, 0x3F, 0xF8, 0x60, 0xCF, 0x09, 0x22, 0xF4, 0xA1, 0xD4, 0xB2, 0xE0, 0x55, 0x10,
            0xA1, 0xA8, 0x8A, 0x85, 0xBF, 0x13, 0x05, 0x28, 0xC2, 0xEE, 0x03, 0x39, 0x72, 0x2E, 0x13, 0x7A,
            0x9D, 0xC0, 0xC0, 0xD8, 0x3C, 0x1E, 0xCE, 0x69, 0xED, 0xAE, 0x1F, 0x4F, 0xA5, 0x57, 0xFA, 0xD3,
            0xDB, 0xC9, 0x89, 0x22, 0x14, 0x99, 0x04, 0x98, 0xBD, 0xB1, 0xC0, 0xE5, 0xFC, 0xAC, 0xC8, 0xF9,
            0x43, 0xEA, 0xCA, 0xC7, 0x94, 0x18, 0x2D, 0x54, 0xA2, 0xC6, 0xAE, 0xF4, 0xD3, 0x16, 0x81, 0xCE,
            0x77, 0x53, 0x11, 0xB0, 0x3A, 0x3A, 0xA3, 0x87, 0x02, 0x1A, 0x39, 0x7E, 0xAE, 0xCC, 0xAB, 0x0D,
            0xD6, 0x9E, 0x1C, 0xCA, 0x3B, 0xFA, 0xCC, 0x30, 0x9F, 0x10, 0x32, 0xEB, 0x13, 0x9B, 0xE3, 0x12,
            0xF4, 0x63, 0x09, 0x75, 0x3A, 0x9B, 0x10, 0x4D, 0x22, 0xDF, 0x87, 0x86, 0xA4, 0xDA, 0xA9, 0xC0,
            0x84, 0x52, 0xC7, 0x8D, 0x20, 0x26, 0x67, 0xD0, 0x45, 0x6E, 0x51, 0xCD, 0x7F, 0xBE, 0x39, 0xD9,
            0xD6, 0xAF, 0x1C, 0xBA, 0x12, 0x5D, 0x63, 0x07, 0x5F, 0xF5, 0xCB, 0xA6, 0x21, 0xE7, 0x44, 0xC7,
            0x05, 0xA8, 0x2C, 0xFB, 0x56, 0x3B, 0x0D, 0xB5, 0x9E, 0x89, 0xE4, 0x60, 0xC4, 0x9F, 0x85, 0xFA,
            0x9F, 0xC2, 0x63, 0x0C, 0xAB, 0xD0, 0x8B, 0x9F, 0x1A, 0x08, 0xA3, 0x89, 0x09, 0x31, 0x67, 0x6A,
            0x84, 0x9A, 0x61, 0x56, 0xB6, 0x71, 0x6E, 0x1D, 0xC6, 0xD0, 0xF0, 0xBD, 0x97, 0x39, 0x04, 0xB4,
            0xB8, 0x4B, 0x59, 0x1B, 0x07, 0x5D, 0xFA, 0x21, 0x85, 0xAB, 0x37, 0xE5, 0x99, 0x40, 0x17, 0x77,
            0x20, 0x37, 0xFC, 0x5A, 0xB5, 0x52, 0xEC, 0x5C, 0x7A, 0x20, 0x69, 0xEF, 0xAA, 0xDA, 0xE7, 0x0A,
            0x14, 0x1E, 0x37, 0x21, 0x31, 0xD2, 0x6D, 0xED, 0x6E, 0xC8, 0x68, 0xD5, 0x0A, 0xA4, 0xFD, 0x5E,
            0x7D, 0x27, 0xF6, 0x56, 0xF5, 0x03, 0xFA, 0x4C, 0x26, 0xBA, 0xE4, 0xF3, 0x4D, 0xE5, 0x1D, 0x39,
            0xCE, 0x47, 0x64, 0xD0, 0xE5, 0x58, 0x4D, 0x95, 0xC5, 0xBC, 0x2B, 0x3E, 0xC8, 0xD6, 0x3B, 0x92,
            0xB8, 0x12, 0x2C, 0xA3, 0x7C, 0x95, 0x10, 0x09, 0x94, 0x52, 0xE2, 0x22, 0xED, 0x94, 0xEF, 0x67,
            0x1B, 0x24, 0x3C, 0xE1, 0xA3, 0x26, 0x18, 0xC9, 0xBC, 0x3D, 0x06, 0x40, 0x44, 0x36, 0xDF, 0x2D,
            0xF6, 0xC6, 0xCD, 0x73, 0x62, 0xD6, 0x86, 0x08, 0x90, 0x44, 0x95, 0xF3, 0x97, 0xB1, 0xEF, 0x05,
            0x90, 0x88, 0xA2, 0xED, 0x85, 0x34, 0x38, 0xE7, 0x52, 0x1C, 0x03, 0xC9, 0x84, 0x39, 0x7B, 0xDF
        };
    }
}
