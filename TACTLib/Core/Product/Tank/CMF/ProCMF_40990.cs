// <TACT xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" HASH="E09B23D08648B760E1FDA6DF82C0F7C444CEBB3B" NAME="TACTLib.ProCMF_40990.dll" xmlns="https://chomp.gg/types/tactheader" />
using static TACTLib.Core.Product.Tank.CMFCryptHandler;
using static TACTLib.Core.Product.Tank.ContentManifestFile;

namespace TACTLib.Core.Product.Tank.CMF {
    [CMFMetadata(AutoDetectVersion = true, Product = TACTProduct.Overwatch)]
    public class ProCMF_40990 : ICMFEncryptionProc {
        public byte[] Key(CMFHeader header, int length) {
            byte[] buffer = new byte[length];

            uint kidx = Keytable[header.BuildVersion & 511];
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                switch (kidx % 3) {
                    case 0:
                        kidx += 103;
                        break;
                    case 1:
                        kidx = 4 * kidx % header.BuildVersion;
                        break;
                    case 2:
                        --kidx;
                        break;
                }
            }

            return buffer;
        }

        public byte[] IV(CMFHeader header, byte[] digest, int length) {
            byte[] buffer = new byte[length];

            uint kidx = (uint) 2 * digest[5];
            uint increment = header.BuildVersion * (uint)header.DataCount % 7;
            for (int i = 0; i != length; ++i) {
                buffer[i] = Keytable[kidx % 512];
                kidx += increment;
                buffer[i] ^= (byte) (digest[(kidx - 73) % SHA1_DIGESTSIZE] + 1);
            }

            return buffer;
        }

        private static readonly byte[] Keytable = {
            0x5F, 0xCC, 0x2B, 0x0B, 0xD1, 0x6E, 0xAA, 0xAF, 0x04, 0xBD, 0xDB, 0x33, 0x25, 0x96, 0x45, 0xBB,
            0xE7, 0x03, 0xBE, 0x3C, 0xC8, 0xE1, 0x20, 0x07, 0x60, 0x66, 0x9C, 0x98, 0x69, 0xB6, 0xE9, 0x69,
            0xA6, 0x77, 0x8B, 0x85, 0x45, 0x44, 0xE2, 0x14, 0xF2, 0x7A, 0xB2, 0xC0, 0xA1, 0x95, 0xF1, 0x91,
            0x8F, 0x33, 0xB8, 0x3C, 0xD1, 0x9A, 0xF7, 0x5F, 0x74, 0x68, 0x12, 0x58, 0x93, 0x50, 0x8C, 0x46,
            0x24, 0x3C, 0xC6, 0x24, 0x25, 0x0A, 0x61, 0xC7, 0xD3, 0xA6, 0xC0, 0x37, 0x5E, 0xA3, 0x93, 0x14,
            0x54, 0x26, 0x99, 0xD8, 0x2C, 0x68, 0xC0, 0xA5, 0x13, 0xA2, 0xA6, 0xEB, 0xFF, 0x0C, 0x3D, 0xBC,
            0x98, 0xAF, 0x7E, 0x5E, 0x53, 0xE3, 0xF7, 0x3A, 0x6E, 0x1C, 0x87, 0xF8, 0x0E, 0xA4, 0x6D, 0xC4,
            0x77, 0xF7, 0x52, 0x62, 0xEF, 0xCC, 0x13, 0x15, 0xC2, 0xB2, 0xE8, 0x37, 0x10, 0x7B, 0x5E, 0x88,
            0x97, 0x43, 0x02, 0xA3, 0xBF, 0x7B, 0x79, 0xBB, 0xF5, 0x37, 0x46, 0x95, 0x01, 0x5D, 0xA8, 0x4F,
            0x54, 0x96, 0x8B, 0xC8, 0x32, 0xCF, 0xDE, 0x7D, 0x2C, 0xDC, 0x5C, 0x09, 0xA4, 0x56, 0xC7, 0xFD,
            0xBF, 0x1C, 0xA5, 0xBD, 0x42, 0x52, 0x95, 0x75, 0x57, 0x2F, 0x82, 0x6D, 0x3F, 0xE9, 0x93, 0xDB,
            0xA1, 0x38, 0x9F, 0x49, 0xC0, 0x67, 0xBB, 0x60, 0x85, 0x46, 0xFF, 0x05, 0x1D, 0xBD, 0xF8, 0x97,
            0xC6, 0x99, 0x1A, 0xC7, 0xFA, 0xD0, 0x74, 0xEF, 0xD7, 0x5F, 0x30, 0x3E, 0x4E, 0x86, 0x33, 0xEB,
            0xE6, 0xB3, 0x6C, 0x74, 0xF5, 0x02, 0x20, 0x41, 0x48, 0x17, 0x10, 0xEC, 0x5D, 0xAF, 0xC8, 0x68,
            0x04, 0x74, 0x97, 0x3A, 0x42, 0x01, 0xFD, 0xC1, 0x4F, 0xC7, 0x8D, 0xE4, 0x3C, 0xEA, 0x25, 0x5B,
            0xB5, 0x00, 0x2A, 0xBC, 0xFD, 0xF0, 0x12, 0xB4, 0x88, 0xE9, 0x97, 0x60, 0xE5, 0xD5, 0x36, 0xB6,
            0xFC, 0xC9, 0xC6, 0x0F, 0x69, 0x35, 0x57, 0x26, 0xDD, 0xBA, 0x02, 0x1C, 0xA4, 0x83, 0x97, 0x12,
            0x0B, 0x48, 0x4D, 0x69, 0x0B, 0x6F, 0xE9, 0x97, 0xD7, 0xB7, 0xA3, 0xBE, 0x07, 0x67, 0xC7, 0xD4,
            0xE8, 0xFD, 0xA6, 0x8E, 0x44, 0x0B, 0xC9, 0xEE, 0xC1, 0x4A, 0x49, 0xD3, 0x3C, 0x6F, 0x0A, 0xCF,
            0x71, 0xFF, 0x8F, 0xB0, 0x33, 0xC1, 0x5F, 0xEA, 0x6E, 0x82, 0x26, 0xCC, 0x0E, 0xBA, 0xFE, 0x6B,
            0x25, 0x96, 0xC0, 0x6D, 0x52, 0xA9, 0xDE, 0xF2, 0xA2, 0x1A, 0x9A, 0x7B, 0x6C, 0xA8, 0x4D, 0x01,
            0x2E, 0xA3, 0x39, 0xFE, 0xA0, 0xFA, 0x33, 0x75, 0x93, 0xA5, 0x86, 0xB4, 0xEE, 0x64, 0xC5, 0xA4,
            0x26, 0x9F, 0xF8, 0xCE, 0x57, 0x5D, 0xCC, 0x58, 0x44, 0xF9, 0x96, 0x0F, 0x78, 0xC7, 0x2A, 0x09,
            0x56, 0x53, 0x32, 0x57, 0x6F, 0xBC, 0xF6, 0x5D, 0x43, 0x92, 0xA8, 0x7D, 0xDD, 0x80, 0x90, 0x08,
            0x37, 0x93, 0xAD, 0xCE, 0x56, 0xC9, 0x9F, 0xEF, 0x9F, 0xE6, 0xDA, 0xB0, 0x54, 0x12, 0x92, 0xA0,
            0xFB, 0xBF, 0xAF, 0x75, 0x58, 0xB1, 0x91, 0xA9, 0x97, 0x58, 0x09, 0xB1, 0xBE, 0xA6, 0xAA, 0x30,
            0x01, 0xCB, 0xFA, 0x6A, 0x24, 0x8E, 0xD1, 0xE9, 0x21, 0x1D, 0x32, 0x40, 0x55, 0x50, 0x74, 0x3A,
            0xDB, 0x1D, 0xD4, 0x9C, 0x58, 0xA3, 0xA0, 0x7B, 0xEA, 0x20, 0x84, 0x68, 0x87, 0xA2, 0x37, 0xCB,
            0x28, 0xF1, 0x67, 0x15, 0x42, 0x6B, 0xD9, 0x09, 0x59, 0xA4, 0x74, 0x0F, 0xD9, 0xA5, 0x65, 0x2F,
            0xFC, 0x35, 0xC7, 0x72, 0x11, 0x6B, 0x35, 0x18, 0x70, 0x6D, 0x2A, 0x0B, 0x05, 0x45, 0xCB, 0x9D,
            0x99, 0xB5, 0x05, 0x10, 0xF7, 0x68, 0x16, 0xA7, 0x08, 0xC1, 0x93, 0xDF, 0x7E, 0x47, 0x67, 0xE2,
            0x03, 0x54, 0xDE, 0xA3, 0x6D, 0xDD, 0x25, 0x2D, 0xCB, 0x2C, 0xCF, 0xBC, 0x27, 0x00, 0x0F, 0x24
        };
    }
}
